// <auto-generated />
using System;
using FRANLES_DENT_3.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FRANLES_DENT_3.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200727053757_horariomedico2")]
    partial class horariomedico2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("FRANLES_DENT_3.Models.Empresa.Atributos.Area_Atencion", b =>
                {
                    b.Property<string>("Area_AtencionId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ClinicaId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Descripcion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.HasKey("Area_AtencionId");

                    b.HasIndex("ClinicaId");

                    b.ToTable("Area_Atencions");
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.Empresa.Atributos.Sucursal_Area_Atencion", b =>
                {
                    b.Property<string>("Sucursal_Area_AtencionId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Area_AtencionId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("SucursalId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Sucursal_Area_AtencionId");

                    b.HasIndex("Area_AtencionId");

                    b.HasIndex("SucursalId");

                    b.ToTable("Sucursal_Area_Atencions");
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.Empresa.Atributos.Tipo_Horario", b =>
                {
                    b.Property<string>("Tipo_HorarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("ClinicaId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<TimeSpan>("Hora_Fin")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan>("Hora_Inicio")
                        .HasColumnType("time(6)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.HasKey("Tipo_HorarioId");

                    b.HasIndex("ClinicaId");

                    b.ToTable("Tipo_Horarios");
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.Empresa.Clinica", b =>
                {
                    b.Property<string>("ClinicaID")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Codigo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Direccion")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("DistritoId")
                        .HasColumnType("varchar(6) CHARACTER SET utf8mb4")
                        .HasMaxLength(6);

                    b.Property<string>("Dominio")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Extencion")
                        .IsRequired()
                        .HasColumnType("varchar(5) CHARACTER SET utf8mb4")
                        .HasMaxLength(5);

                    b.Property<bool>("MultiSucursal")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nombre")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ClinicaID");

                    b.HasIndex("DistritoId");

                    b.ToTable("Clinicas");
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.Empresa.Sucursal", b =>
                {
                    b.Property<string>("SucursalId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("ClinicaId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("CorreoSucursal")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CorreoSucursal2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("DistritoId")
                        .IsRequired()
                        .HasColumnType("varchar(6) CHARACTER SET utf8mb4");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<bool>("Principal")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Telefono2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("SucursalId");

                    b.HasIndex("ClinicaId");

                    b.HasIndex("DistritoId");

                    b.ToTable("Sucursals");
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.Historico.PerfilRolRemove", b =>
                {
                    b.Property<int>("PerfilRolRemoveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Clinica")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Perfil")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Rol")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("PerfilRolRemoveId");

                    b.ToTable("PerfilRolRemoves");
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.Localization.Departamento", b =>
                {
                    b.Property<string>("DepartamentoId")
                        .HasColumnType("varchar(2) CHARACTER SET utf8mb4")
                        .HasMaxLength(2);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int>("PaisId")
                        .HasColumnType("int");

                    b.HasKey("DepartamentoId");

                    b.HasIndex("PaisId");

                    b.ToTable("Departamentos");
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.Localization.Distrito", b =>
                {
                    b.Property<string>("DistritoId")
                        .HasColumnType("varchar(6) CHARACTER SET utf8mb4")
                        .HasMaxLength(6);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("ProvinciaId")
                        .HasColumnType("varchar(4) CHARACTER SET utf8mb4");

                    b.HasKey("DistritoId");

                    b.HasIndex("ProvinciaId");

                    b.ToTable("Distritos");
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.Localization.Pais", b =>
                {
                    b.Property<int>("PaisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("PaisId");

                    b.ToTable("Paises");
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.Localization.Provincia", b =>
                {
                    b.Property<string>("ProvinciaId")
                        .HasColumnType("varchar(4) CHARACTER SET utf8mb4")
                        .HasMaxLength(4);

                    b.Property<string>("DepartamentoId")
                        .HasColumnType("varchar(2) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("ProvinciaId");

                    b.HasIndex("DepartamentoId");

                    b.ToTable("Provincias");
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.MedicoDato.Area_Medico", b =>
                {
                    b.Property<string>("Area_MedicoId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Sucursal_Area_AtencionId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Area_MedicoId");

                    b.HasIndex("Sucursal_Area_AtencionId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Area_Medicos");
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.MedicoDato.Atributo.Especialidad", b =>
                {
                    b.Property<string>("EspecialidadId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ClinicaId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Descripcion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Fecha_Add")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Fecha_Upd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.HasKey("EspecialidadId");

                    b.HasIndex("ClinicaId");

                    b.ToTable("Especialidades");
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.MedicoDato.DatosMedico", b =>
                {
                    b.Property<string>("DatosMedicoId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int>("COP")
                        .HasColumnType("int");

                    b.Property<string>("ClinicaId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<DateTime>("FechaIniHab")
                        .HasColumnType("Date");

                    b.Property<DateTime>("FechaRegistroHab")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaTermHab")
                        .HasColumnType("Date");

                    b.Property<bool>("Habilidad")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("OpcPorc_Ganancia_REM_fj")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("OpcRemFija")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Porc_Ganancia_REM_FJ")
                        .HasColumnType("int");

                    b.Property<int>("Porcentaje_ganancia_asegurada")
                        .HasColumnType("int");

                    b.Property<int>("Porcentaje_ganancia_interno")
                        .HasColumnType("int");

                    b.Property<string>("RNE")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("RemFijaMonto")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("DatosMedicoId");

                    b.HasIndex("ClinicaId");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("DatosMedicos");
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.MedicoDato.Especialidad_Medico", b =>
                {
                    b.Property<string>("DatosMedicoId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("EspecialidadId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("DatosMedicoId", "EspecialidadId");

                    b.HasIndex("EspecialidadId");

                    b.ToTable("Especialidad_Medicos");
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.MedicoDato.HorarioMedicoAreaAtencion", b =>
                {
                    b.Property<string>("Area_AtencionId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("HorarioMedicoId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("Area_AtencionId", "HorarioMedicoId");

                    b.HasIndex("HorarioMedicoId");

                    b.ToTable("HorarioMedicoAreaAtencions");
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.Permisos.AtributoRol", b =>
                {
                    b.Property<string>("AtributoRolId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("FatherId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<bool>("Hijos")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsAsistente")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMedic")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("NameRol")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("AtributoRolId");

                    b.HasIndex("FatherId");

                    b.ToTable("AtributoRols");
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.Permisos.Clinica_Rol", b =>
                {
                    b.Property<string>("ClinicaId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RolId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ClinicaId", "RolId");

                    b.HasIndex("RolId");

                    b.ToTable("Clinica_Rols");
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.Permisos.Perfil", b =>
                {
                    b.Property<string>("PerfilId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ClinicaId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Descripcion")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsAsistente")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMedic")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("PerfilId");

                    b.HasIndex("ClinicaId");

                    b.ToTable("Perfils");
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.Permisos.Perfil_Rol", b =>
                {
                    b.Property<string>("PerfilId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RolId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("PerfilId", "RolId");

                    b.HasIndex("RolId");

                    b.ToTable("Perfil_Rols");
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.Personal.DatosEmergenciaUsuario", b =>
                {
                    b.Property<int>("DatosEmergenciaUsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Apellido_Materno")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Apellido_Paterno")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Movil")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Nombre")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int>("Parentesco")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("DatosEmergenciaUsuarioId");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("DatosEmergenciaUsuarios");
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.Personal.HorarioMedico", b =>
                {
                    b.Property<string>("HorarioMedicoId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("DiaWeek")
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.Property<short>("DiaWeekId")
                        .HasColumnType("smallint");

                    b.Property<string>("SucursalId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Tipo_HorarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.HasKey("HorarioMedicoId");

                    b.HasIndex("SucursalId");

                    b.HasIndex("Tipo_HorarioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("HorarioMedicos");
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.Personal.Sucursal_Usuario", b =>
                {
                    b.Property<string>("SucursalId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("SucursalId", "UsuarioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Sucursal_Usuarios");
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.Personal.Usuario", b =>
                {
                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<bool>("Acceso")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Apellido_Materno")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Apellido_Paterno")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClinicaId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Direccion")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("DistritoId")
                        .HasColumnType("varchar(6) CHARACTER SET utf8mb4")
                        .HasMaxLength(6);

                    b.Property<DateTime>("FechaActuali")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaCreacio")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaEliminacion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Fecha_Nac")
                        .HasColumnType("Date");

                    b.Property<bool>("IsAsist")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMedic")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Movil")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("Nombre_Cuenta")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<string>("NumDocumento")
                        .IsRequired()
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.Property<string>("PerfilId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasColumnType("varchar(1) CHARACTER SET utf8mb4")
                        .HasMaxLength(1);

                    b.Property<string>("Telefono")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("TipoDocumento")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UsuarioId");

                    b.HasIndex("ClinicaId");

                    b.HasIndex("DistritoId");

                    b.HasIndex("PerfilId");

                    b.HasIndex("UserId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.Empresa.Atributos.Area_Atencion", b =>
                {
                    b.HasOne("FRANLES_DENT_3.Models.Empresa.Clinica", "Clinica")
                        .WithMany("Area_Atencions")
                        .HasForeignKey("ClinicaId");
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.Empresa.Atributos.Sucursal_Area_Atencion", b =>
                {
                    b.HasOne("FRANLES_DENT_3.Models.Empresa.Atributos.Area_Atencion", "Area_Atencion")
                        .WithMany("Sucursal_Area_Atencions")
                        .HasForeignKey("Area_AtencionId");

                    b.HasOne("FRANLES_DENT_3.Models.Empresa.Sucursal", "Sucursal")
                        .WithMany("Sucursal_Area_Atencions")
                        .HasForeignKey("SucursalId");
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.Empresa.Atributos.Tipo_Horario", b =>
                {
                    b.HasOne("FRANLES_DENT_3.Models.Empresa.Clinica", "Clinica")
                        .WithMany("Tipo_Horarios")
                        .HasForeignKey("ClinicaId");
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.Empresa.Clinica", b =>
                {
                    b.HasOne("FRANLES_DENT_3.Models.Localization.Distrito", "Distrito")
                        .WithMany("Clinicas")
                        .HasForeignKey("DistritoId");
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.Empresa.Sucursal", b =>
                {
                    b.HasOne("FRANLES_DENT_3.Models.Empresa.Clinica", "Clinica")
                        .WithMany("Sucursals")
                        .HasForeignKey("ClinicaId");

                    b.HasOne("FRANLES_DENT_3.Models.Localization.Distrito", "Distrito")
                        .WithMany()
                        .HasForeignKey("DistritoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.Localization.Departamento", b =>
                {
                    b.HasOne("FRANLES_DENT_3.Models.Localization.Pais", "Pais")
                        .WithMany("Departamentos")
                        .HasForeignKey("PaisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.Localization.Distrito", b =>
                {
                    b.HasOne("FRANLES_DENT_3.Models.Localization.Provincia", "Provincia")
                        .WithMany("Distritos")
                        .HasForeignKey("ProvinciaId");
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.Localization.Provincia", b =>
                {
                    b.HasOne("FRANLES_DENT_3.Models.Localization.Departamento", "Departamento")
                        .WithMany("Provincias")
                        .HasForeignKey("DepartamentoId");
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.MedicoDato.Area_Medico", b =>
                {
                    b.HasOne("FRANLES_DENT_3.Models.Empresa.Atributos.Sucursal_Area_Atencion", "Sucursal_Area_Atencion")
                        .WithMany("Area_Medicos")
                        .HasForeignKey("Sucursal_Area_AtencionId");

                    b.HasOne("FRANLES_DENT_3.Models.Personal.Usuario", "Usuario")
                        .WithMany("Area_Medicos")
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.MedicoDato.Atributo.Especialidad", b =>
                {
                    b.HasOne("FRANLES_DENT_3.Models.Empresa.Clinica", "Clinica")
                        .WithMany("Especialidads")
                        .HasForeignKey("ClinicaId");
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.MedicoDato.DatosMedico", b =>
                {
                    b.HasOne("FRANLES_DENT_3.Models.Empresa.Clinica", "Clinica")
                        .WithMany()
                        .HasForeignKey("ClinicaId");

                    b.HasOne("FRANLES_DENT_3.Models.Personal.Usuario", "Usuario")
                        .WithOne("DatosMedico")
                        .HasForeignKey("FRANLES_DENT_3.Models.MedicoDato.DatosMedico", "UsuarioId");
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.MedicoDato.Especialidad_Medico", b =>
                {
                    b.HasOne("FRANLES_DENT_3.Models.MedicoDato.DatosMedico", "DatosMedico")
                        .WithMany("Especialidad_Medicos")
                        .HasForeignKey("DatosMedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FRANLES_DENT_3.Models.MedicoDato.Atributo.Especialidad", "Especialidad")
                        .WithMany("Especialidad_Medicos")
                        .HasForeignKey("EspecialidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.MedicoDato.HorarioMedicoAreaAtencion", b =>
                {
                    b.HasOne("FRANLES_DENT_3.Models.Empresa.Atributos.Area_Atencion", "Area_Atencion")
                        .WithMany("HorarioMedicoAreaAtencions")
                        .HasForeignKey("Area_AtencionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FRANLES_DENT_3.Models.Personal.HorarioMedico", "HorarioMedico")
                        .WithMany("HorarioMedicoAreaAtencions")
                        .HasForeignKey("HorarioMedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.Permisos.AtributoRol", b =>
                {
                    b.HasOne("FRANLES_DENT_3.Models.Permisos.AtributoRol", "RolFather")
                        .WithMany("RolesHijos")
                        .HasForeignKey("FatherId");
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.Permisos.Clinica_Rol", b =>
                {
                    b.HasOne("FRANLES_DENT_3.Models.Empresa.Clinica", "Clinica")
                        .WithMany("Clinica_Rols")
                        .HasForeignKey("ClinicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FRANLES_DENT_3.Models.Permisos.AtributoRol", "Rol")
                        .WithMany("Clinica_Rols")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.Permisos.Perfil", b =>
                {
                    b.HasOne("FRANLES_DENT_3.Models.Empresa.Clinica", "Clinica")
                        .WithMany("Perfils")
                        .HasForeignKey("ClinicaId");
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.Permisos.Perfil_Rol", b =>
                {
                    b.HasOne("FRANLES_DENT_3.Models.Permisos.Perfil", "Perfil")
                        .WithMany("Perfil_Rols")
                        .HasForeignKey("PerfilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FRANLES_DENT_3.Models.Permisos.AtributoRol", "Role")
                        .WithMany("Perfil_Rols")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.Personal.DatosEmergenciaUsuario", b =>
                {
                    b.HasOne("FRANLES_DENT_3.Models.Personal.Usuario", "Usuario")
                        .WithOne("DatosEmergenciaUsuario")
                        .HasForeignKey("FRANLES_DENT_3.Models.Personal.DatosEmergenciaUsuario", "UsuarioId");
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.Personal.HorarioMedico", b =>
                {
                    b.HasOne("FRANLES_DENT_3.Models.Empresa.Sucursal", "Sucursal")
                        .WithMany()
                        .HasForeignKey("SucursalId");

                    b.HasOne("FRANLES_DENT_3.Models.Empresa.Atributos.Tipo_Horario", "Tipo_Horario")
                        .WithMany()
                        .HasForeignKey("Tipo_HorarioId");

                    b.HasOne("FRANLES_DENT_3.Models.Personal.Usuario", "Usuario")
                        .WithMany("HorarioMedicos")
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.Personal.Sucursal_Usuario", b =>
                {
                    b.HasOne("FRANLES_DENT_3.Models.Empresa.Sucursal", "Sucursal")
                        .WithMany("Sucursal_Usuarios")
                        .HasForeignKey("SucursalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FRANLES_DENT_3.Models.Personal.Usuario", "Usuario")
                        .WithMany("Sucursal_Usuarios")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FRANLES_DENT_3.Models.Personal.Usuario", b =>
                {
                    b.HasOne("FRANLES_DENT_3.Models.Empresa.Clinica", "Clinica")
                        .WithMany("Usuarios")
                        .HasForeignKey("ClinicaId");

                    b.HasOne("FRANLES_DENT_3.Models.Localization.Distrito", "Distrito")
                        .WithMany("Usuarios")
                        .HasForeignKey("DistritoId");

                    b.HasOne("FRANLES_DENT_3.Models.Permisos.Perfil", "Perfil")
                        .WithMany("Usuarios")
                        .HasForeignKey("PerfilId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
